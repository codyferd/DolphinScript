#!/bin/sh
set -eu

usage() {
  cat <<EOF
Usage:
  dsa [n] [m] [l]
  dsa x <archive.dsa> [<outdir>]

Modes:
  (no args)    Create executable .dsa with auto execution (requires main.dsc).
  n            Create non-executable .dsa archive (stub does NOT auto-run).
  x <file>     Extract .dsa archive.

Flags (only after n or none):
  m            No compression (raw tar inside .dsa).
  l            Low compression (zstd -1 instead of -19).

Examples:
  dsa
  dsa n m
  dsa x archive.dsa /outdir
EOF
  exit 1
}

MODE="exe"
COMPRESS=1
ZSTD_LEVEL=19

# Parse mode (first argument)
if [ $# -gt 0 ]; then
  case "$1" in
    x)
      [ $# -ge 2 ] && [ $# -le 3 ] || usage
      ARCHIVE="$2"
      OUTDIR="${3:-.}"
      [ -f "$ARCHIVE" ] || { echo "Error: '$ARCHIVE' not found"; exit 1; }

      # Find the line number of the marker
      LINE_NUM=0
      while IFS= read -r LINE; do
        LINE_NUM=$((LINE_NUM + 1))
        [ "$LINE" = "__ARCHIVE_BELOW__" ] && break
      done < "$ARCHIVE"
      [ "$LINE" != "__ARCHIVE_BELOW__" ] && { echo "Error: marker missing"; exit 1; }

      SKIP=$((LINE_NUM + 1))
      TMPFILE=$(mktemp)
      tail -n +"$SKIP" "$ARCHIVE" > "$TMPFILE"

      read -r HEADER < "$TMPFILE"
      mkdir -p "$OUTDIR"
      if [ "$HEADER" = "__USE_ZSTD__" ]; then
        tail -n +2 "$TMPFILE" | zstd -d | tar -xf - -C "$OUTDIR"
      else
        tar -xf "$TMPFILE" -C "$OUTDIR"
      fi
      rm -f "$TMPFILE"
      echo "Extracted to: $OUTDIR"
      exit 0
      ;;
    n)
      MODE="nonexe"
      shift
      ;;
  esac
fi

# Parse flags
while [ $# -gt 0 ]; do
  case "$1" in
    m) COMPRESS=0 ;;
    l) ZSTD_LEVEL=1 ;;
    n) ;; # already handled
    *) usage ;;
  esac
  shift
done

APPDIR="."
BASE=$(basename "$(pwd)")
OUT="${BASE}.dsa"

[ "$MODE" = "exe" ] && [ ! -f "./main.dsc" ] && { echo "Error: main.dsc missing"; exit 1; }

{
  cat <<'EOF'
#!/bin/sh
set -eu

SELF="$0"
LINE_NUM=0
while IFS= read -r LINE; do
  LINE_NUM=$((LINE_NUM + 1))
  [ "$LINE" = "__ARCHIVE_BELOW__" ] && break
done < "$SELF"
[ "$LINE" != "__ARCHIVE_BELOW__" ] && { echo "Error: corrupt archive (marker missing)"; exit 1; }

SKIP=$((LINE_NUM + 1))
TMPDIR="${TMPDIR:-/tmp}/dsa.$$"
mkdir -p "$TMPDIR"
trap 'rm -rf "$TMPDIR"' EXIT INT TERM

tail -n +"$SKIP" "$SELF" > "$TMPDIR/archive.dat"
HEADER=$(head -n1 "$TMPDIR/archive.dat")
tail -n +2 "$TMPDIR/archive.dat" > "$TMPDIR/archive.tar"

if [ "$HEADER" = "__USE_ZSTD__" ]; then
  zstd -d < "$TMPDIR/archive.tar" | tar -xf - -C "$TMPDIR"
else
  tar -xf "$TMPDIR/archive.tar" -C "$TMPDIR"
fi

chmod -R u+rw "$TMPDIR"
EOF

  if [ "$MODE" = "exe" ]; then
    cat <<'EOF'
cd "$TMPDIR"
CMD=""
while IFS= read -r LINE; do
  case "$LINE" in
    dsd\ exec\ str\;\ \"*\") CMD="${LINE#*\"}"; CMD="${CMD%%\"*}"; break ;;
  esac
done < main.dsc

[ -z "$CMD" ] && { echo "Error: No execution command found in main.dsc"; exit 1; }

if [ $# -eq 0 ]; then
  exec sh -c "$CMD"
else
  FIRST_ARG="$1"
  case "$FIRST_ARG" in
    /*) ABS="$FIRST_ARG" ;;
    *) ABS="$(cd "$(dirname "$FIRST_ARG")" && pwd)/$(basename "$FIRST_ARG")" ;;
  esac

  case "$ABS" in
    "$TMPDIR"/*) INSIDE_TMPDIR=true ;;
    *) INSIDE_TMPDIR=false ;;
  esac

  if [ -n "$ABS" ] && [ -f "$ABS" ] && [ "$INSIDE_TMPDIR" = false ]; then
    exec sh -c "$CMD \"$@\""
  else
    exec sh -c "$CMD"
  fi
fi

EOF
  else
    echo "# Non-executable mode: no auto execution"
  fi

  echo "__ARCHIVE_BELOW__"

  if [ "$COMPRESS" -eq 0 ]; then
    tar --exclude="$OUT" -cf - -C "$APPDIR" .
  else
    echo "__USE_ZSTD__"
    tar --exclude="$OUT" -cf - -C "$APPDIR" . | zstd -${ZSTD_LEVEL} --stdout
  fi
} > "$OUT"

chmod +x "$OUT"
echo "Created: $OUT"
exit 0