#!/bin/sh
set -eu

usage() {
  cat <<EOF
Usage:
  dsa [n] [m] [l]
  dsa x <archive.dsa> [<outdir>]

Modes:
  (no args)    Create executable .dsa with auto execution (requires main.dsc).
  n            Create non-executable .dsa archive (stub does NOT auto-run).
  x <file>     Extract .dsa archive.

Flags (only after n or none):
  m            No compression (raw tar inside .dsa).
  l            Low compression (zstd -1 instead of -19).

Examples:
  dsa
  dsa n m
  dsa x archive.dsa /outdir
EOF
  exit 1
}

MODE="exe"
COMPRESS=1
ZSTD_LEVEL=19

# Parse mode (only first argument)
if [ $# -gt 0 ]; then
  case "$1" in
    x)
      # Extract mode
      if [ $# -lt 2 ] || [ $# -gt 3 ]; then usage; fi
      ARCHIVE="$2"
      OUTDIR="${3:-.}"
      [ -f "$ARCHIVE" ] || { echo "Error: '$ARCHIVE' not found"; exit 1; }

      MARK="__ARCHIVE_BELOW__"
      LINE=$(grep -an "^$MARK\$" "$ARCHIVE" | cut -d: -f1 | head -n1)
      [ -n "$LINE" ] || { echo "Error: marker missing"; exit 1; }
      SKIP=$((LINE + 1))

      TMPFILE=$(mktemp)
      tail -n +$SKIP "$ARCHIVE" > "$TMPFILE"
      HEADER=$(head -n1 "$TMPFILE")

      mkdir -p "$OUTDIR"
      if [ "$HEADER" = "__USE_ZSTD__" ]; then
        tail -n +2 "$TMPFILE" | zstd -d | tar -xf - -C "$OUTDIR"
      else
        tar -xf "$TMPFILE" -C "$OUTDIR"
      fi
      rm -f "$TMPFILE"
      echo "Extracted to: $OUTDIR"
      exit 0
      ;;
    n)
      MODE="nonexe"
      shift
      ;;
    *)
      # If first arg is a flag, treat as exe mode flags
      ;;
  esac
fi

# Parse flags m or l (after shifting n)
while [ $# -gt 0 ]; do
  case "$1" in
    m) COMPRESS=0 ;;
    l) ZSTD_LEVEL=1 ;;
    n) ;; # Already handled
    *) usage ;;
  esac
  shift
done

APPDIR="."
BASE=$(basename "$(pwd)")
OUT="${BASE}.dsa"

if [ "$MODE" = "exe" ]; then
  [ -f "./main.dsc" ] || { echo "Error: main.dsc missing"; exit 1; }
fi

# Create the DSA archive (stub + payload)
{
  cat <<'EOF'
#!/bin/sh
set -eu

SELF="$0"
MARK="__ARCHIVE_BELOW__"
LINE=$(grep -an "^$MARK\$" "$SELF" | cut -d: -f1 | head -n1)
if [ -z "$LINE" ]; then
  echo "Error: corrupt archive (marker missing)"
  exit 1
fi
SKIP=$((LINE + 1))

TMPDIR="${TMPDIR:-/tmp}/dsa.$$"
mkdir -p "$TMPDIR"
trap 'rm -rf "$TMPDIR"' EXIT INT TERM

tail -n +$SKIP "$SELF" > "$TMPDIR/archive.dat"

HEADER=$(head -n1 "$TMPDIR/archive.dat")
tail -n +2 "$TMPDIR/archive.dat" > "$TMPDIR/archive.tar"

if [ "$HEADER" = "__USE_ZSTD__" ]; then
  zstd -d < "$TMPDIR/archive.tar" | tar -xf - -C "$TMPDIR"
else
  tar -xf "$TMPDIR/archive.tar" -C "$TMPDIR"
fi

# Fix permissions (make sure main.dsc is readable)
chmod -R u+rw "$TMPDIR"

EOF

  if [ "$MODE" = "exe" ]; then
    cat <<'EOF'
cd "$TMPDIR"
CMD=$(grep '^dsd exec str; ' main.dsc | head -n1 | cut -d'"' -f2)

if [ -z "$CMD" ]; then
  echo "Error: No execution command found in main.dsc"
  exit 1
fi

if [ $# -eq 0 ]; then
  exec sh -c "$CMD"
else
  FIRST_ARG="$1"
  case "$FIRST_ARG" in
    /*) ABS="$FIRST_ARG" ;;
    *) ABS="$(cd "$(dirname "$FIRST_ARG")" && pwd)/$(basename "$FIRST_ARG")" ;;
  esac
  if [ -n "$ABS" ] && [ -f "$ABS" ] && ! echo "$ABS" | grep -q "^$TMPDIR"; then
    exec sh -c "$CMD \"$@\""
  else
    exec sh -c "$CMD"
  fi
fi
EOF
  else
    # Non-executable mode: no auto execution
    echo "# Non-executable mode: no auto execution"
  fi

  echo "__ARCHIVE_BELOW__"

  # Payload archive
  if [ "$COMPRESS" -eq 0 ]; then
    tar --exclude="$OUT" -cf - -C "$APPDIR" .
  else
    echo "__USE_ZSTD__"
    tar --exclude="$OUT" -cf - -C "$APPDIR" . | zstd -${ZSTD_LEVEL} --stdout
  fi
} > "$OUT"

chmod +x "$OUT"
echo "Created: $OUT"
exit 0